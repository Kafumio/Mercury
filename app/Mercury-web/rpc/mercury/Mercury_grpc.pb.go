// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: Mercury.proto

package mercury

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mercury_Send_FullMethodName      = "/mercury.Mercury/Send"
	Mercury_BatchSend_FullMethodName = "/mercury.Mercury/BatchSend"
)

// MercuryClient is the client API for Mercury service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MercuryClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*SendResponse, error)
}

type mercuryClient struct {
	cc grpc.ClientConnInterface
}

func NewMercuryClient(cc grpc.ClientConnInterface) MercuryClient {
	return &mercuryClient{cc}
}

func (c *mercuryClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, Mercury_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mercuryClient) BatchSend(ctx context.Context, in *BatchSendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, Mercury_BatchSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MercuryServer is the server API for Mercury service.
// All implementations must embed UnimplementedMercuryServer
// for forward compatibility
type MercuryServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	BatchSend(context.Context, *BatchSendRequest) (*SendResponse, error)
	mustEmbedUnimplementedMercuryServer()
}

// UnimplementedMercuryServer must be embedded to have forward compatible implementations.
type UnimplementedMercuryServer struct {
}

func (UnimplementedMercuryServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMercuryServer) BatchSend(context.Context, *BatchSendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSend not implemented")
}
func (UnimplementedMercuryServer) mustEmbedUnimplementedMercuryServer() {}

// UnsafeMercuryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MercuryServer will
// result in compilation errors.
type UnsafeMercuryServer interface {
	mustEmbedUnimplementedMercuryServer()
}

func RegisterMercuryServer(s grpc.ServiceRegistrar, srv MercuryServer) {
	s.RegisterService(&Mercury_ServiceDesc, srv)
}

func _Mercury_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercuryServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mercury_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercuryServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mercury_BatchSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercuryServer).BatchSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mercury_BatchSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercuryServer).BatchSend(ctx, req.(*BatchSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mercury_ServiceDesc is the grpc.ServiceDesc for Mercury service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mercury_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mercury.Mercury",
	HandlerType: (*MercuryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Mercury_Send_Handler,
		},
		{
			MethodName: "BatchSend",
			Handler:    _Mercury_BatchSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Mercury.proto",
}
